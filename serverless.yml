# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-southeast-1
  environment:
    PLAYER_POINTS_TABLE: ${self:custom.DYNAMODB.TableName}
    BUCKET_NAME: ${self:custom.S3.BUCKET_NAME}
plugins:
  - serverless-plugin-typescript
  - serverless-offline
custom:
  DYNAMODB:
    TableName: 'player-points'
  S3:
    BUCKET_NAME: 'uploadfilename'
# you can overwrite defaults here
  # stage: dev
  # region: ap-southeast-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  hello:
    handler: handler.hello
  getS3PostPresignedUploadFile:
    handler: handler.getS3PostPresignedUploadFile
    events:
      - httpApi:
          method: get
          path: /document-upload-url
          cors:
            origin: ${env:CORS_ORIGIN, '*'}
            maxAge: 3600
  getS3PresignedURL:
    handler: handler.getS3PresignedURL
    events:
      - httpApi:
          method: get
          path: /get-upload-url
          cors:
            origin: ${env:CORS_ORIGIN, '*'}
            maxAge: 3600
  getPoint:
    handler: handler.getPoint
    events:
      - httpApi:
        method: get
        path: /players-points/{ID}
        cors:
          origin: ${env:CORS_ORIGIN, '*'}
          maxAge: 3600
  createPoint:
    handler: handler.createPoint
    events:
      - httpApi:
        method: post
        path: /players-points
        cors:
          origin: ${env:CORS_ORIGIN, '*'}
          maxAge: 3600
  updatePoint:
    handler: handler.updatePoint
    events:
      - httpApi:
        method: patch
        path: /players-points
        cors:
          origin: '*'
          maxAge: 3600
  getPointsByType:
    handler: handler.getPointsByType
    events:
      - httpApi:
        method: get
        path: /players-points/{type}
        cors:
          origin: '*'
          maxAge: 3600
  getWorkbookFromS3:
    handler: handler.getWorkbookFromS3
    events:
      - httpApi:
        method: get
        path: /get-workbook
        cors: '*'
        maxAge: 3600
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    playerPointsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: type
            AttributeType: N
          - AttributeName: firstName
            AttributeType: S
          - AttributeName: lastName
            AttributeType: S
          - AttributeName: age
            AttributeType: N
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: type
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.DYNAMODB.TableName}-dev
        Tags:
          - Key: heritage
            Value: serverless
        GlobalSecondaryIndexes:
          - IndexName: player_point_type_index
            KeySchema:
              - AttributeName: ID
                KeyType: HASH
              - AttributeName: type
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
  Outputs:
    playerPointsRN:
      Description: "Description for the output"
      Value: !Ref playerPointsTable
